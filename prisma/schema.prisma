// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)

  watchlistMovies Int[]
  likedMovies Int[]
  dislikedMovies Int[]
  recommendedMovies Int[]

  onboardingGenres String[]
  onboardingKeywords String[]
  // Samo movies_id saljemo na model
  onboardingMovies Int[]
  onboardingCompleted Boolean @default(false)

  feedback Feedback[]
  accounts      Account[]
  userMovieMatrix UserMovieMatrix[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
    id String @id @default(cuid())
    email String
    token String @unique
    expires DateTime

    // only one token per email
    @@unique([email, token])
}

model PasswordResetToken {
    id String @id @default(cuid())
    email String
    token String @unique
    expires DateTime

    // only one token per email
    @@unique([email, token])
}

model Movie {
    id String @id @default(cuid())
    genres String[]
    movie_id Int
    imdb_id String?
    poster_path String?
    release_date DateTime?
    runtime Float
    title String
    description String
    keywords String[]
    weighted_rating Float

    userMovieMatrix UserMovieMatrix[]
}

model UserMovieMatrix {
    id String  @id @default(cuid())

    userId String
    movieId String
    rating Int @default(-1)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

    @@unique([userId, movieId])
}

model Genre {
    id String @id @default(cuid())
    name String
}

model Keyword {
    id String @id @default(cuid())
    name String
}

model Feedback {
    id String @id @default(cuid())
    userId String

    csat Int
    message String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
